<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login/Sign Up</title>
    <style>
        body {
            font-family: sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            background-color: #f4f4f4;
        }

        .container {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
            width: 300px;
        }

        .form-container {
            display: none;
            flex-direction: column;
            gap: 10px;
        }

        .form-container.active {
            display: flex;
        }

        label {
            display: block;
            margin-bottom: 5px;
        }

        input {
            width: 100%;
            padding: 8px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        button {
            background-color: #007bff;
            color: #fff;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        button:hover {
            background-color: #0056b3;
        }

        .message {
            margin-top: 10px;
            padding: 8px;
            border-radius: 4px;
        }

        .message.error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .message.success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .user-info {
            display: none;
            text-align: center;
            margin-bottom: 15px;
        }

        .user-info.active {
            display: block;
        }

        .auth-buttons {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .auth-buttons button {
            flex-grow: 1;
            margin: 0 5px;
        }
    </style>
</head>

<body>

    <div class="container">
        <div class="auth-buttons">
            <button id="login-btn">Login</button>
            <button id="signin-btn">Sign Up</button>
        </div>

        <div id="user-display" class="user-info">
            <p>Welcome, <span id="user-name-display"></span>!</p>
            <button id="logout-btn">Logout</button>
        </div>

        <form id="login-form" class="form-container">
            <label for="login-email">Email:</label>
            <input type="email" id="login-email" required>

            <label for="login-password">Password:</label>
            <input type="password" id="login-password" required>

            <button id="login-submit">Login</button>
            <div id="login-message" class="message"></div>
        </form>

        <form id="signin-form" class="form-container">
            <label for="signin-name">Name:</label>
            <input type="text" id="signin-name" required>

            <label for="signin-email">Email:</label>
            <input type="email" id="signin-email" required>

            <label for="signin-password">Password:</label>
            <input type="password" id="signin-password" required>

            <button id="signin-submit">Sign Up</button>
            <div id="signin-message" class="message"></div>
        </form>
    </div>

    <script>
        // Dummy API
        const dummyAPI = {
            users: JSON.parse(localStorage.getItem('dummyUsers')) || [],

            // Simulate user registration
            register: function (name, email, password) {
                return new Promise((resolve) => {
                    setTimeout(() => {
                        const existingUser = this.users.find(user => user.email === email);
                        if (existingUser) {
                            resolve({ success: false, error: 'Email already exists.' });
                        } else {
                            const newUser = { name, email, password }; // Store password in plain text (INSECURE!)
                            this.users.push(newUser);
                            localStorage.setItem('dummyUsers', JSON.stringify(this.users));
                            resolve({ success: true, user: { name, email } });
                        }
                    }, 500); // Simulate network delay
                });
            },

            // Simulate user login
            login: function (email, password) {
                return new Promise((resolve) => {
                    setTimeout(() => {
                        const user = this.users.find(user => user.email === email && user.password === password); // Compare plain text password (INSECURE!)
                        if (user) {
                            resolve({ success: true, user: { name: user.name, email: user.email } });
                        } else {
                            resolve({ success: false, error: 'Invalid credentials.' });
                        }
                    }, 500); // Simulate network delay
                });
            },

            // Simulate user logout (doesn't need to do anything on the dummy API side)
            logout: function () {
                return new Promise((resolve) => {
                    setTimeout(() => {
                        resolve({ success: true });
                    }, 200); // Simulate network delay
                });
            },
        };

        document.addEventListener('DOMContentLoaded', () => {
            // Get HTML elements
            const loginBtn = document.getElementById('login-btn');
            const signinBtn = document.getElementById('signin-btn');
            const logoutBtn = document.getElementById('logout-btn');
            const userDisplay = document.getElementById('user-display');
            const userNameDisplay = document.getElementById('user-name-display');

            const loginForm = document.getElementById('login-form');
            const signinForm = document.getElementById('signin-form');

            const loginSubmit = document.getElementById('login-submit');
            const signinSubmit = document.getElementById('signin-submit');

            const loginMessage = document.getElementById('login-message');
            const signinMessage = document.getElementById('signin-message');

            const loginEmailInput = document.getElementById('login-email');
            const loginPasswordInput = document.getElementById('login-password');
            const signinNameInput = document.getElementById('signin-name');
            const signinEmailInput = document.getElementById('signin-email');
            const signinPasswordInput = document.getElementById('signin-password');

            const API_BASE_URL = '/api'; // **Replace with your actual API base URL**

            // Function to check login status
            function checkLoginStatus() {
                const user = localStorage.getItem('user');
                if (user) {
                    const userObj = JSON.parse(user);
                    showLoggedInUI(userObj.name || userObj.email); // Display name if available
                } else {
                    showLoggedOutUI();
                }
            }

            // Function to show logged-in UI
            function showLoggedInUI(username) {
                loginForm.style.display = 'none';
                signinForm.style.display = 'none';
                loginBtn.style.display = 'none';
                signinBtn.style.display = 'none';
                logoutBtn.style.display = 'inline-block';
                userDisplay.style.display = 'block';
                userNameDisplay.textContent = username;
            }

            // Function to show logged-out UI
            function showLoggedOutUI() {
                loginForm.style.display = 'none';
                signinForm.style.display = 'none';
                loginBtn.style.display = 'inline-block';
                signinBtn.style.display = 'inline-block';
                logoutBtn.style.display = 'none';
                userDisplay.style.display = 'none';
                localStorage.removeItem('user'); // Clear user data
            }

            // Event listeners to show/hide forms
            loginBtn.addEventListener('click', () => {
                loginForm.style.display = 'flex';
                signinForm.style.display = 'none';
                loginMessage.textContent = '';
            });

            signinBtn.addEventListener('click', () => {
                signinForm.style.display = 'flex';
                loginForm.style.display = 'none';
                signinMessage.textContent = '';
            });

            // Logout functionality
            logoutBtn.addEventListener('click', () => {
                dummyAPI.logout()
                    .then(response => {
                        if (response.success) {
                            localStorage.removeItem('user');
                            showLoggedOutUI();
                        } else {
                            console.error('Logout failed');
                        }
                    })
                    .catch(error => console.error('Error during logout:', error));
            });

            // Login form submission
            loginSubmit.addEventListener('click', (e) => {
                e.preventDefault();
                const email = loginEmailInput.value.trim();
                const password = loginPasswordInput.value.trim();

                if (!email || !password) {
                    loginMessage.textContent = 'Please enter both email and password.';
                    loginMessage.className = 'message error';
                    return;
                }

                dummyAPI.login(email, password)
                    .then(data => {
                        if (data.success && data.user) {
                            //  Important:  In a real app, you'd get more user data.
                            localStorage.setItem('user', JSON.stringify(data.user));
                            loginMessage.textContent = 'Login successful!';
                            loginMessage.className = 'message success';
                            checkLoginStatus();
                        } else {
                            loginMessage.textContent = data.error || 'Login failed. Invalid credentials.';
                            loginMessage.className = 'message error';
                        }
                    })
                    .catch(error => {
                        console.error('Error during login:', error);
                        loginMessage.textContent = 'An error occurred during login.';
                        loginMessage.className = 'message error';
                    });

                loginEmailInput.value = '';
                loginPasswordInput.value = '';
            });

            // Sign-in form submission
            signinSubmit.addEventListener('click', (e) => {
                e.preventDefault();
                const name = signinNameInput.value.trim();
                const email = signinEmailInput.value.trim();
                const password = signinPasswordInput.value.trim();

                if (!name || !email || !password) {
                    signinMessage.textContent = 'Please fill in all fields.';
                    signinMessage.className = 'message error';
                    return;
                }

                dummyAPI.register(name, email, password)
                    .then(data => {
                        if (data.success && data.user) {
                            signinMessage.textContent = 'Sign in successful! You can now log in.';
                            signinMessage.className = 'message success';
                            signinForm.style.display = 'none';
                            loginForm.style.display = 'flex';
                        } else {
                            signinMessage.textContent = data.error || 'Sign in failed.';
                            signinMessage.className = 'message error';
                        }
                    })
                    .catch(error => {
                        console.error('Error during sign in:', error);
                        signinMessage.textContent = 'An error occurred during sign in.';
                        signinMessage.className = 'message error';
                    });

                signinNameInput.value = '';
                signinEmailInput.value = '';
                signinPasswordInput.value = '';
            });

            // Initialize
            checkLoginStatus();
        });
    </script>
</body>

</html>